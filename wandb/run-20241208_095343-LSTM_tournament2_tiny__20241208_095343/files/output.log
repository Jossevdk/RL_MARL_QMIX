Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 7, 20]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: approxQTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\416697252.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\416697252.py:70: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2353059140.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2353059140.py:70: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])), (tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]))]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: AstarTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2532231574.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2532231574.py:70: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
[tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 0., 1.,  ..., 1., 0., 1.],
           ...,
           [1., 0., 1.,  ..., 1., 0., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          ...,

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]]]]], device='cuda:0'), tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 0., 1.,  ..., 1., 0., 1.],
           ...,
           [1., 0., 1.,  ..., 1., 0., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          ...,

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]]]]], device='cuda:0')]
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])), (tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]))]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1027143488.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1027143488.py:70: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
[tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 0., 1.,  ..., 1., 0., 1.],
           ...,
           [1., 0., 1.,  ..., 1., 0., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          ...,

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]]]]], device='cuda:0'), tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 0., 1.,  ..., 1., 0., 1.],
           ...,
           [1., 0., 1.,  ..., 1., 0., 1.],
           [1., 0., 0.,  ..., 0., 0., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          ...,

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 1., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]],

          [[0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.],
           ...,
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 1., 0.,  ..., 0., 0., 0.],
           [0., 0., 0.,  ..., 0., 0., 0.]]]]], device='cuda:0')]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: approxQTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\455181376.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\772335850.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: baselineTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\546006863.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]))
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])), (tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]))]
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\717320895.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]))
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\556700316.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: AstarTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\556700316.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).unsqueeze(0).unsqueeze(0).to(device)
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\556700316.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([1, 1, 8, 7, 20])
hidden: torch.Size([1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\833369932.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\833369932.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/approxQTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: MCTSTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'tuple'>
([tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')], [1, 3], [0.02, 0.02], [tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]]), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])], [False, False], [(tensor([[[-0.0386,  0.0558, -0.0134, -0.0332,  0.0173, -0.0005,  0.0064,
          -0.0299, -0.0061, -0.0097, -0.0408,  0.0463, -0.0157, -0.0086,
           0.0185,  0.0317,  0.0030,  0.0461,  0.0180, -0.0075, -0.0188,
           0.0279,  0.0537,  0.0084, -0.0031, -0.0257,  0.0124,  0.0076,
           0.0163, -0.0034, -0.0047,  0.0070,  0.0480, -0.0315,  0.0054,
          -0.0181,  0.0063, -0.0170, -0.0465, -0.0443,  0.0365, -0.0471,
          -0.0389, -0.0580, -0.0120,  0.0572,  0.0492, -0.0250, -0.0005,
          -0.0204,  0.0245, -0.0252,  0.0104,  0.0249,  0.0248,  0.0101,
           0.0037,  0.0117,  0.0212,  0.0387,  0.0054,  0.0202, -0.0436,
          -0.0304]]], device='cuda:0'), tensor([[[-0.0844,  0.1051, -0.0284, -0.0733,  0.0352, -0.0011,  0.0127,
          -0.0619, -0.0116, -0.0208, -0.0767,  0.0956, -0.0317, -0.0183,
           0.0373,  0.0616,  0.0065,  0.0883,  0.0391, -0.0149, -0.0355,
           0.0557,  0.1117,  0.0162, -0.0062, -0.0495,  0.0243,  0.0152,
           0.0309, -0.0072, -0.0094,  0.0133,  0.1041, -0.0683,  0.0113,
          -0.0389,  0.0126, -0.0352, -0.1072, -0.0840,  0.0731, -0.0910,
          -0.0793, -0.1113, -0.0236,  0.1235,  0.0947, -0.0510, -0.0010,
          -0.0393,  0.0471, -0.0555,  0.0221,  0.0519,  0.0480,  0.0184,
           0.0078,  0.0223,  0.0419,  0.0753,  0.0105,  0.0381, -0.0941,
          -0.0654]]], device='cuda:0')), (tensor([[[-0.0099,  0.0176, -0.0515, -0.0439,  0.0283,  0.0248, -0.0137,
          -0.0173,  0.0331, -0.0577, -0.0209,  0.0259, -0.0593,  0.0140,
           0.0005, -0.0297,  0.0279,  0.0013,  0.0099,  0.0365,  0.0144,
          -0.0405,  0.0093, -0.0007, -0.0238,  0.0168,  0.0312,  0.0442,
          -0.0030,  0.0433,  0.0071,  0.0427,  0.0226,  0.0329,  0.0259,
           0.0271, -0.0027,  0.0066, -0.0138, -0.0156, -0.0195, -0.0049,
          -0.0055,  0.0045,  0.0063, -0.0064,  0.0056,  0.0348,  0.0073,
           0.0010,  0.0237,  0.0044, -0.0108,  0.0393,  0.0108, -0.0196,
          -0.0479,  0.0008,  0.0141,  0.0196, -0.0094,  0.0512, -0.0324,
           0.0336]]], device='cuda:0'), tensor([[[-0.0205,  0.0339, -0.1132, -0.0857,  0.0519,  0.0542, -0.0255,
          -0.0359,  0.0636, -0.1057, -0.0381,  0.0530, -0.1228,  0.0291,
           0.0009, -0.0604,  0.0537,  0.0027,  0.0200,  0.0755,  0.0285,
          -0.0824,  0.0198, -0.0014, -0.0511,  0.0328,  0.0601,  0.0929,
          -0.0058,  0.0852,  0.0157,  0.0845,  0.0436,  0.0716,  0.0511,
           0.0562, -0.0049,  0.0133, -0.0262, -0.0318, -0.0366, -0.0098,
          -0.0125,  0.0099,  0.0114, -0.0126,  0.0108,  0.0721,  0.0145,
           0.0021,  0.0465,  0.0079, -0.0236,  0.0718,  0.0210, -0.0405,
          -0.0875,  0.0016,  0.0272,  0.0362, -0.0193,  0.1049, -0.0680,
           0.0671]]], device='cuda:0'))])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: heuristicTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/heuristicTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/MCTSTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 126
index 2, action West, depth 122
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 50
index 2, action West, depth 126
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action West, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 123
index 2, action East, depth 123
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 123
index 2, action West, depth 126
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 123
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 125
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 127
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 126
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 127
index 2, action East, depth 126
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 125
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 125
index 2, action West, depth 126
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 125
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 124
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action East, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 125
index 2, action West, depth 126
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 125
index 2, action East, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 126
index 2, action East, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
index 0, action West, depth 125
index 2, action West, depth 123
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action West, depth 123
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
index 0, action West, depth 126
index 2, action West, depth 123
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 125
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 128
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 127
index 2, action West, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
index 0, action West, depth 126
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
index 0, action West, depth 123
index 2, action West, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 123
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action East, depth 124
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action East, depth 123
index 2, action West, depth 125
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
index 0, action West, depth 124
index 2, action West, depth 124
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 1., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: AstarTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: approxQTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 1.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 1.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 1.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 1.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
[tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 0., 1.,  ..., 1., 0., 1.],
         ...,
         [1., 0., 1.,  ..., 1., 0., 1.],
         [1., 0., 0.,  ..., 0., 0., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 1., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')]
tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 1.,  ..., 1., 0., 1.],
          ...,
          [1., 0., 1.,  ..., 1., 0., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 1., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 1., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
<class 'list'>
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/baselineTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
[4, 2]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
[4, 1]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: approxQTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0')), (tensor([[[ 0.0581,  0.0150, -0.0405,  0.0033,  0.0220,  0.0472, -0.0006,
          -0.0202,  0.0015,  0.0314,  0.0319, -0.0191, -0.0353,  0.0259,
          -0.0306, -0.0098,  0.0355, -0.0136, -0.0157, -0.0108, -0.0090,
           0.0342, -0.0043, -0.0120,  0.0004, -0.0037,  0.0168, -0.0159,
           0.0190,  0.0111,  0.0435, -0.0014,  0.0112, -0.0455, -0.0693,
           0.0083, -0.0135, -0.0125, -0.0443, -0.0177,  0.0189, -0.0103,
          -0.0297, -0.0005,  0.0076,  0.0326, -0.0231,  0.0091,  0.0137,
           0.0040,  0.0322,  0.0634, -0.0207,  0.0276,  0.0375, -0.0214,
          -0.0227,  0.0447, -0.0029,  0.0175, -0.0095,  0.0085,  0.0118,
           0.0346]]], device='cuda:0'), tensor([[[ 0.1220,  0.0326, -0.0830,  0.0068,  0.0467,  0.0962, -0.0012,
          -0.0392,  0.0030,  0.0656,  0.0700, -0.0413, -0.0728,  0.0533,
          -0.0598, -0.0199,  0.0672, -0.0272, -0.0302, -0.0205, -0.0172,
           0.0680, -0.0091, -0.0252,  0.0008, -0.0071,  0.0369, -0.0297,
           0.0371,  0.0235,  0.0848, -0.0028,  0.0231, -0.0850, -0.1466,
           0.0175, -0.0289, -0.0246, -0.0950, -0.0374,  0.0400, -0.0220,
          -0.0606, -0.0010,  0.0155,  0.0701, -0.0425,  0.0170,  0.0245,
           0.0076,  0.0673,  0.1234, -0.0387,  0.0573,  0.0712, -0.0450,
          -0.0428,  0.0917, -0.0056,  0.0360, -0.0195,  0.0173,  0.0252,
           0.0679]]], device='cuda:0'))]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: heuristicTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0')), (tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'))]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: MCTSTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
[(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0')), (tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'))]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/heuristicTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
(tensor([[[ 0.0079,  0.0281,  0.0010,  0.0338,  0.0327, -0.0456, -0.0031,
           0.0259, -0.0247,  0.0336, -0.0300, -0.0410, -0.0059, -0.0024,
           0.0253, -0.0511, -0.0065, -0.0234, -0.0014,  0.0440,  0.0480,
           0.0543,  0.0208, -0.0270, -0.0505, -0.0089,  0.0046, -0.0161,
           0.0154,  0.0366, -0.0034, -0.0048,  0.0171, -0.0375, -0.0188,
          -0.0360, -0.0380,  0.0006,  0.0169, -0.0006,  0.0200,  0.0157,
          -0.0023,  0.0274, -0.0038, -0.0343,  0.0132,  0.0222,  0.0170,
          -0.0439,  0.0279,  0.0028,  0.0224,  0.0232,  0.0025, -0.0262,
           0.0114, -0.0143,  0.0182, -0.0379, -0.0422,  0.0129,  0.0446,
          -0.0011]]], device='cuda:0'), tensor([[[ 0.0163,  0.0557,  0.0020,  0.0657,  0.0656, -0.0864, -0.0064,
           0.0525, -0.0443,  0.0676, -0.0575, -0.0912, -0.0106, -0.0048,
           0.0510, -0.1006, -0.0125, -0.0489, -0.0031,  0.0932,  0.0942,
           0.1079,  0.0405, -0.0492, -0.1072, -0.0177,  0.0091, -0.0340,
           0.0313,  0.0752, -0.0065, -0.0098,  0.0343, -0.0750, -0.0406,
          -0.0751, -0.0726,  0.0012,  0.0330, -0.0013,  0.0436,  0.0321,
          -0.0045,  0.0533, -0.0075, -0.0699,  0.0290,  0.0445,  0.0346,
          -0.0919,  0.0520,  0.0058,  0.0436,  0.0460,  0.0052, -0.0504,
           0.0226, -0.0261,  0.0345, -0.0704, -0.0820,  0.0290,  0.0847,
          -0.0022]]], device='cuda:0'))
torch.Size([32, 2, 2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'))
torch.Size([32, 2, 2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/approxQTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
(tensor([[[-2.2601e-02, -3.5621e-05,  2.8549e-02, -2.3005e-02,  2.7619e-03,
           2.0786e-02, -7.2944e-03,  5.1341e-03, -1.0387e-02,  2.5455e-02,
           2.4843e-02, -5.1950e-02, -3.6733e-02,  4.2555e-04,  1.4870e-02,
           2.0740e-02,  2.5965e-02, -1.5576e-02, -8.0461e-03,  3.0889e-02,
          -2.7186e-02,  3.6899e-02, -1.1352e-02,  9.7016e-03,  6.9942e-02,
          -3.6566e-02, -4.2116e-04, -3.0497e-02,  5.5551e-02, -3.1349e-02,
           5.1102e-02,  2.5754e-02,  2.3466e-02, -2.9984e-02,  1.6956e-02,
           3.2053e-03, -4.3554e-02,  3.6281e-02,  3.0095e-02, -2.9727e-02,
           3.9778e-04,  4.8435e-02,  4.5467e-03, -3.9235e-02, -3.1000e-02,
           2.6117e-02,  4.7657e-02,  1.2219e-02, -1.4147e-02,  8.7973e-03,
           4.6896e-02, -2.6707e-02,  6.1142e-02,  9.5640e-03,  6.7069e-02,
          -1.3545e-02,  3.0853e-04,  4.4655e-02, -4.2397e-02,  4.6529e-02,
           2.3336e-02,  7.4089e-03,  8.0952e-03, -1.2588e-02]]],
       device='cuda:0'), tensor([[[-4.2207e-02, -7.5139e-05,  6.2264e-02, -4.4903e-02,  5.3752e-03,
           3.9265e-02, -1.5886e-02,  9.8874e-03, -1.9639e-02,  5.4468e-02,
           5.4172e-02, -1.0334e-01, -7.5229e-02,  8.6317e-04,  2.9071e-02,
           3.9261e-02,  5.2310e-02, -3.0535e-02, -1.6701e-02,  5.9709e-02,
          -5.9937e-02,  7.2112e-02, -2.1599e-02,  1.8403e-02,  1.4091e-01,
          -7.9998e-02, -8.8500e-04, -6.2924e-02,  1.1463e-01, -6.4511e-02,
           9.2347e-02,  5.1762e-02,  4.4420e-02, -5.7507e-02,  3.2699e-02,
           6.2647e-03, -8.8292e-02,  6.9829e-02,  5.6141e-02, -5.7186e-02,
           8.8843e-04,  1.0041e-01,  1.0269e-02, -8.4933e-02, -6.5521e-02,
           4.9815e-02,  8.8906e-02,  2.5713e-02, -2.6055e-02,  1.7226e-02,
           8.6990e-02, -4.7803e-02,  1.1922e-01,  1.9152e-02,  1.2822e-01,
          -2.5902e-02,  6.1103e-04,  9.7015e-02, -9.2860e-02,  9.8121e-02,
           4.8276e-02,  1.4417e-02,  1.6137e-02, -2.4138e-02]]],
       device='cuda:0'))
shape:  torch.Size([32, 2, 2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1072220182.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
(tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'), tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],
       device='cuda:0'))
shape:  torch.Size([32, 2, 2, 1, 1, 64])
torch.Size([32, 2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: baselineTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: baselineTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3352471871.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3352471871.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3352471871.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3352471871.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3936968389.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3936968389.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\4207372178.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 2, 1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\421929064.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 1, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\4114806922.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\4114806922.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/AstarTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3108534754.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3108534754.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2947461492.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2947461492.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2947461492.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2947461492.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2947461492.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([1, 2, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\3547767988.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: heuristicTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
tensor([[[[[ 4.2489e-03, -1.9354e-03,  1.3179e-02,  3.8380e-02, -3.0363e-02,
             1.3716e-03, -1.0999e-02, -6.5313e-03,  3.6789e-02,  7.4031e-03,
            -5.4137e-03,  1.8068e-02,  1.2903e-02, -6.3703e-03,  2.5266e-02,
            -1.7853e-02, -3.7566e-02, -1.2908e-02, -2.2654e-02,  2.9183e-02,
             7.7597e-03,  1.4397e-02,  3.8382e-02,  2.5487e-03,  8.3257e-03,
            -6.8775e-03, -5.6400e-03,  3.0726e-02, -1.4586e-02,  2.1085e-02,
             1.7821e-04,  4.4049e-02,  1.1326e-02, -1.2836e-02, -2.4735e-02,
            -2.8900e-02,  2.1682e-02,  3.5338e-02,  1.4690e-02, -1.7939e-02,
            -1.7383e-02,  1.3396e-02, -5.0835e-03, -1.9029e-02,  2.4345e-02,
             1.7371e-02, -3.1857e-02, -1.4305e-02, -1.1853e-02, -3.8994e-02,
            -5.2535e-02, -1.8749e-03,  2.8272e-03, -9.8182e-03,  1.2985e-05,
            -2.8660e-02, -3.4019e-02,  5.0704e-03,  4.5632e-02,  8.3849e-04,
            -6.8988e-02, -2.2454e-02, -2.5901e-02, -5.8021e-03]]],


         [[[ 7.9879e-03, -3.8660e-03,  2.8867e-02,  8.2409e-02, -6.0685e-02,
             2.8597e-03, -2.0387e-02, -1.3894e-02,  7.4057e-02,  1.4217e-02,
            -1.1029e-02,  3.9765e-02,  2.6630e-02, -1.3942e-02,  5.2608e-02,
            -3.5431e-02, -7.0888e-02, -2.8084e-02, -4.6226e-02,  6.0881e-02,
             1.5441e-02,  3.1824e-02,  7.4898e-02,  5.1396e-03,  1.7783e-02,
            -1.2298e-02, -1.1629e-02,  6.0530e-02, -2.8526e-02,  4.2917e-02,
             3.5642e-04,  9.1987e-02,  2.2809e-02, -2.6355e-02, -5.4282e-02,
            -6.0079e-02,  4.2585e-02,  6.5294e-02,  2.9155e-02, -3.6244e-02,
            -3.6349e-02,  2.6575e-02, -1.0046e-02, -4.0608e-02,  4.7917e-02,
             3.5751e-02, -6.6027e-02, -2.7857e-02, -2.2874e-02, -7.5669e-02,
            -1.1325e-01, -3.6230e-03,  5.7048e-03, -1.9585e-02,  2.8818e-05,
            -5.6660e-02, -7.1039e-02,  9.1658e-03,  8.6491e-02,  1.5520e-03,
            -1.4528e-01, -4.8213e-02, -5.0442e-02, -1.1209e-02]]]],



        [[[[-1.6019e-02,  2.9348e-02,  1.3860e-02, -7.0166e-02,  2.0320e-02,
             3.7066e-02,  3.9512e-02, -2.8064e-02, -5.3495e-02,  4.0318e-03,
            -2.6140e-02, -3.5964e-02,  2.5575e-02,  5.3417e-02, -2.0641e-03,
             7.1179e-02,  2.8517e-02, -3.7239e-02,  2.8856e-03,  3.7339e-03,
             3.9026e-02, -4.3678e-02,  1.0110e-02, -2.6967e-02,  3.3743e-02,
             5.9255e-02, -3.0498e-02,  5.5669e-02, -1.5302e-02,  1.3276e-02,
            -5.7043e-02, -2.6411e-02,  7.7126e-02,  6.1832e-02, -4.9102e-02,
            -3.5763e-02, -5.1660e-02,  3.8481e-02, -5.7593e-02, -1.4836e-02,
             9.9138e-03,  3.4225e-02, -8.8464e-02, -4.9345e-03, -2.9019e-02,
             5.5206e-02,  5.0445e-02,  2.9826e-02, -8.1221e-03,  2.4212e-02,
            -4.0826e-02, -2.6009e-03,  3.8103e-02,  4.9269e-02, -8.1113e-04,
             1.0799e-01, -6.9339e-02,  1.8280e-02, -6.5696e-02,  5.7463e-02,
            -4.8774e-02,  1.4817e-02, -8.3453e-02, -6.1142e-03]]],


         [[[-3.1117e-02,  6.3632e-02,  2.5476e-02, -1.4956e-01,  3.6535e-02,
             7.1516e-02,  8.4884e-02, -5.2729e-02, -1.1784e-01,  9.2432e-03,
            -5.5037e-02, -7.5223e-02,  5.2340e-02,  1.0356e-01, -4.6531e-03,
             1.4194e-01,  5.7424e-02, -7.6874e-02,  5.4395e-03,  8.1108e-03,
             7.5926e-02, -9.7526e-02,  2.0432e-02, -5.2971e-02,  6.5475e-02,
             1.1327e-01, -6.3678e-02,  1.1693e-01, -2.9259e-02,  2.4932e-02,
            -1.1910e-01, -5.4953e-02,  1.5066e-01,  1.2805e-01, -9.9354e-02,
            -7.3623e-02, -1.0827e-01,  8.2412e-02, -1.2050e-01, -3.0868e-02,
             2.0508e-02,  6.1488e-02, -1.8380e-01, -1.0243e-02, -5.9612e-02,
             1.1075e-01,  1.0508e-01,  6.5178e-02, -1.5974e-02,  4.9646e-02,
            -8.1000e-02, -5.1572e-03,  8.2330e-02,  9.4813e-02, -1.5412e-03,
             2.2701e-01, -1.4570e-01,  3.8705e-02, -1.2859e-01,  1.1175e-01,
            -1.0696e-01,  3.2429e-02, -1.7245e-01, -1.3566e-02]]]]],
       device='cuda:0', grad_fn=<CopySlices>)
shape:  torch.Size([2, 2, 1, 32, 1, 64])
torch.Size([2, 1, 32, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
tensor([[[[[-0.0133,  0.0532, -0.0019, -0.0459, -0.0021,  0.0400,  0.0433,
             0.0352, -0.0182,  0.0280, -0.0304, -0.0161, -0.0179,  0.0560,
             0.0378, -0.0461,  0.0334,  0.0056,  0.0474,  0.0445,  0.0211,
             0.0305, -0.0731, -0.0696,  0.0146,  0.0641,  0.0364,  0.0136,
            -0.0054,  0.0493, -0.0003, -0.0549, -0.0021,  0.0465,  0.0101,
            -0.0197,  0.0117,  0.0070,  0.0311,  0.0291,  0.0089,  0.0514,
            -0.0448, -0.0697,  0.0094, -0.0162,  0.0404,  0.0225,  0.0832,
            -0.0530,  0.0008,  0.0167, -0.0544, -0.0187,  0.0327,  0.0462,
             0.0536, -0.0083, -0.0069, -0.0105,  0.0471,  0.0219, -0.0326,
            -0.0340]]],


         [[[-0.0281,  0.1072, -0.0040, -0.0976, -0.0044,  0.0829,  0.0935,
             0.0663, -0.0387,  0.0519, -0.0564, -0.0321, -0.0364,  0.1068,
             0.0725, -0.0918,  0.0712,  0.0126,  0.0969,  0.0941,  0.0414,
             0.0601, -0.1484, -0.1325,  0.0301,  0.1337,  0.0821,  0.0267,
            -0.0108,  0.0970, -0.0005, -0.1226, -0.0041,  0.0929,  0.0194,
            -0.0369,  0.0243,  0.0135,  0.0591,  0.0599,  0.0191,  0.0958,
            -0.0866, -0.1397,  0.0198, -0.0340,  0.0905,  0.0422,  0.1594,
            -0.1189,  0.0017,  0.0318, -0.1123, -0.0403,  0.0606,  0.0875,
             0.1076, -0.0170, -0.0133, -0.0216,  0.0995,  0.0402, -0.0651,
            -0.0658]]]],



        [[[[ 0.0036,  0.0411,  0.0562,  0.0100, -0.0719,  0.0568, -0.0139,
             0.0556,  0.0058, -0.0656, -0.0109,  0.1228, -0.0498, -0.0055,
             0.0132,  0.0239,  0.0394,  0.0536, -0.0423,  0.0253,  0.0167,
             0.0416, -0.0221,  0.0508,  0.0385,  0.0422, -0.0146,  0.0572,
            -0.0169,  0.0562,  0.0911,  0.0190,  0.0534,  0.0747, -0.0101,
            -0.0536, -0.0666,  0.0660, -0.0671, -0.0050, -0.0486, -0.0264,
            -0.0092,  0.0430,  0.0148, -0.0128,  0.0277, -0.0908,  0.0504,
            -0.0265, -0.0163,  0.0393,  0.0657, -0.0535,  0.0116, -0.0038,
            -0.0294, -0.0032, -0.0669, -0.0196,  0.0208,  0.0318,  0.1014,
            -0.0422]]],


         [[[ 0.0066,  0.0767,  0.1230,  0.0191, -0.1422,  0.1118, -0.0291,
             0.1019,  0.0123, -0.1310, -0.0216,  0.2556, -0.1167, -0.0104,
             0.0270,  0.0480,  0.0769,  0.1063, -0.0853,  0.0488,  0.0354,
             0.0818, -0.0479,  0.1049,  0.0800,  0.0758, -0.0289,  0.1209,
            -0.0342,  0.1208,  0.1768,  0.0410,  0.1137,  0.1525, -0.0227,
            -0.0989, -0.1285,  0.1175, -0.1312, -0.0095, -0.1032, -0.0518,
            -0.0187,  0.0822,  0.0281, -0.0251,  0.0566, -0.1948,  0.0923,
            -0.0544, -0.0300,  0.0746,  0.1251, -0.1045,  0.0261, -0.0078,
            -0.0556, -0.0067, -0.1287, -0.0385,  0.0394,  0.0659,  0.1919,
            -0.0857]]]]], device='cuda:0', grad_fn=<CopySlices>)
shape:  torch.Size([2, 2, 1, 32, 1, 64])
torch.Size([2, 1, 32, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
tensor([[[[[-0.0701, -0.0262, -0.0034,  0.0606, -0.0319, -0.0224,  0.0710,
            -0.1193, -0.0227, -0.0695,  0.0072,  0.0341, -0.0438,  0.0231,
            -0.0815, -0.0162,  0.0262, -0.0102,  0.0371, -0.0080, -0.0061,
             0.0250,  0.0649,  0.0263,  0.0034, -0.0159, -0.0453, -0.0562,
            -0.0128, -0.0502, -0.0245, -0.1098,  0.0089,  0.0655,  0.0070,
             0.0210,  0.0557, -0.0592,  0.0282,  0.0512, -0.0497,  0.0177,
             0.1192,  0.0065, -0.0502,  0.0365, -0.0288,  0.0999,  0.0604,
            -0.0083,  0.0634,  0.0322,  0.0244,  0.0043, -0.0333, -0.0048,
            -0.0511,  0.1226, -0.0358,  0.0165,  0.0439, -0.0323,  0.1109,
             0.0358]]],


         [[[-0.1600, -0.0568, -0.0072,  0.1360, -0.0622, -0.0433,  0.1280,
            -0.2372, -0.0452, -0.1250,  0.0130,  0.0632, -0.0883,  0.0458,
            -0.1694, -0.0343,  0.0522, -0.0200,  0.0726, -0.0170, -0.0124,
             0.0538,  0.1383,  0.0526,  0.0073, -0.0311, -0.1054, -0.1097,
            -0.0271, -0.1105, -0.0486, -0.2172,  0.0198,  0.1221,  0.0130,
             0.0454,  0.1252, -0.1312,  0.0551,  0.1091, -0.0924,  0.0346,
             0.2310,  0.0139, -0.1023,  0.0779, -0.0614,  0.1847,  0.1245,
            -0.0172,  0.1266,  0.0733,  0.0474,  0.0078, -0.0727, -0.0095,
            -0.1052,  0.2739, -0.0628,  0.0336,  0.0825, -0.0591,  0.2176,
             0.0638]]]],



        [[[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000]]],


         [[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
             0.0000]]]]], device='cuda:0', grad_fn=<CopySlices>)
shape:  torch.Size([2, 2, 1, 32, 1, 64])
torch.Size([2, 1, 32, 1, 64])
CHECK:  torch.Size([2, 1, 32, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/approxQTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 1, 64])
torch.Size([2, 1, 32, 1, 64])
CHECK:  torch.Size([2, 1, 32, 1, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
tensor([[False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False],
        [False, False]], device='cuda:0')
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/baselineTeam.py
Arguments: {}
Red team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
tensor([[0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0000, 0.0000],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0000, 0.0000],
        [0.0100, 0.0100],
        [0.0000, 0.0000],
        [0.0000, 0.0000],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0100, 0.0100],
        [0.0000, 0.0000],
        [0.0000, 0.0000],
        [0.0100, 0.0100],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0200, 0.0200],
        [0.0200, 0.0200]], device='cuda:0')
torch.Size([32, 2])
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\765435999.py:39: UserWarning: Using a target size (torch.Size([32, 1])) that is different to the input size (torch.Size([32, 32])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  td_loss = F.huber_loss(target_q_tot, q_tot,  reduction="none")
c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\autograd\graph.py:825: UserWarning: Error detected in CudnnRnnBackward0. Traceback of forward call that caused the error:
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel_launcher.py", line 18, in <module>
    app.launch_new_instance()
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\traitlets\config\application.py", line 1075, in launch_instance
    app.start()
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\kernelapp.py", line 739, in start
    self.io_loop.start()
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\tornado\platform\asyncio.py", line 205, in start
    self.asyncio_loop.run_forever()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2288.0_x64__qbz5n2kfra8p0\Lib\asyncio\base_events.py", line 640, in run_forever
    self._run_once()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2288.0_x64__qbz5n2kfra8p0\Lib\asyncio\base_events.py", line 1992, in _run_once
    handle._run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2288.0_x64__qbz5n2kfra8p0\Lib\asyncio\events.py", line 88, in _run
    self._context.run(self._callback, *self._args)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\kernelbase.py", line 545, in dispatch_queue
    await self.process_one()
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\kernelbase.py", line 534, in process_one
    await dispatch(*args)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\kernelbase.py", line 437, in dispatch_shell
    await result
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\ipkernel.py", line 362, in execute_request
    await super().execute_request(stream, ident, parent)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\kernelbase.py", line 778, in execute_request
    reply_content = await reply_content
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\ipkernel.py", line 449, in do_execute
    res = shell.run_cell(
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\ipykernel\zmqshell.py", line 549, in run_cell
    return super().run_cell(*args, **kwargs)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\interactiveshell.py", line 3075, in run_cell
    result = self._run_cell(
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\interactiveshell.py", line 3130, in _run_cell
    result = runner(coro)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\async_helpers.py", line 128, in _pseudo_sync_runner
    coro.send(None)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\interactiveshell.py", line 3334, in run_cell_async
    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\interactiveshell.py", line 3517, in run_ast_nodes
    if await self.run_code(code, result, async_=asy):
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\IPython\core\interactiveshell.py", line 3577, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\2905620708.py", line 6, in <module>
    train_qmix(env, name_experiment, agent_q_networks, mixing_network, target_q_networks, replay_buffer, train_p, learn_p, random_enemy = True)
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py", line 54, in train_qmix
    action, hidden_states[i, :, :, :, :] = epsilon_greedy_action(agent_q_networks[i], state, hidden_states[i, :, :, :, :], epsilon, legal_actions)
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1617760191.py", line 45, in epsilon_greedy_action
    q_values, hidden = agent_q_network(state, hidden)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\nn\modules\module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\nn\modules\module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\71576083.py", line 41, in forward
    lstm_out, (hx, cx) = self.lstm(projected_state, (hx, cx))
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\nn\modules\module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\nn\modules\module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX\venv\Lib\site-packages\torch\nn\modules\rnn.py", line 1123, in forward
    result = _VF.lstm(
 (Triggered internally at C:\actions-runner\_work\pytorch\pytorch\builder\windows\pytorch\torch\csrc\autograd\python_anomaly_mode.cpp:115.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
[4, 8, 11, 14]
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Blue team starts
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:51: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  state = torch.tensor(obs_agent, dtype=torch.float32).to(device)
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py:69: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states_converted.append(torch.tensor(next_states[index], dtype=torch.float32))
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
CHECK:  torch.Size([2, 1, 1, 64])
CHECK 2:  torch.Size([2, 1, 1, 64])
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
state: torch.Size([8, 7, 20])
hidden: torch.Size([2, 1, 1, 64])
random action
hidden batch torch.Size([2, 2, 1, 1, 64])
shape:  torch.Size([2, 2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
CHECK:  torch.Size([2, 1, 32, 64])
CHECK 2:  torch.Size([2, 1, 32, 64])
C:\Users\josse\AppData\Local\Temp\ipykernel_27180\765435999.py:39: UserWarning: Using a target size (torch.Size([32, 1])) that is different to the input size (torch.Size([32, 32])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  td_loss = F.huber_loss(target_q_tot, q_tot,  reduction="none")
Loaded layout from file
Loading Team: c:\Users\josse\OneDrive\Documenten\creditcontract\RL\RL_MARL_QMIX//agents/randomTeam.py
Arguments: {}
Red team starts
enemy: randomTeam.py
Exception occurred
Traceback (most recent call last):
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\625534732.py", line 8, in <module>
    train_qmix(env, "test", agent_q_networks, mixing_network, target_q_networks, replay_buffer, train_p, learn_p)
  File "C:\Users\josse\AppData\Local\Temp\ipykernel_27180\1334243878.py", line 38, in train_qmix
    enemieName = np.random.choice(enemylist, p=weights)
                                  ^^^^^^^^^
UnboundLocalError: cannot access local variable 'enemylist' where it is not associated with a value
None
